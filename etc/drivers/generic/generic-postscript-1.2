driver generic-postscript { 

   # CHANGELOG
   #    version 1.1  
   #      - Remove ugly "echo" commands
   #      - Add option for manual feed
   #    version 1.2  
   #      - Fix closing ] on option for manual feed...
   
   help "This driver converts all files, including text, to
         PostScript.  Drivers specific to your postscript
	 printer can be generated by a ppd-to-pdq driver
	 translation script.  
	 
	 Check http://feynman.tam.uiuc.edu/pdq/ for 
	 availability."

   option { 
      var = "DUPLEX"
      desc = "Duplex options"
      choice "duplex_default" { 
         desc = "Printer default"
         help = "Print in the default mode for your printer"  
      }
      choice "duplex" { 
	 value = "force_duplex"
         desc = "two-sided"
         help = "Set the printer to duplex mode"
      }
      choice "simplex" { 
	 value = "force_simplex"
         desc = "one-sided"
         help = "Set the printer to simplex mode"
      }
   }

   option { 
      var = "TUMBLE"
      desc = "Tumble options"
      choice "tumble_default" { 
         desc = "Printer default"
         help = "Print in the default mode for your printer"  
      }
      choice "tumble" { 
	 value = "force_tumble"
         desc = "tumble"
         help = "Set the printer to tumble mode"
      }
      choice "notumble" { 
	 value = "force_notumble"
         desc = "no tumble"
         help = "Set the printer to no tumble mode"
      }
   }

   option { 
      var = "MANUAL"
      desc = "Manual paper feed selection"
      choice "autofeed" { 
         value = "false"
         desc = "Do not wait for manual paper feed"
         help = "Do not force your printer to wait for manually fed paper"
      }
      choice "manual" { 
         value = "true"
         desc = "Feed paper manually"
         help = "Instruct the printer to wait for paper to be manually fed"
      }
   }

   option { 
      var = "PAPER_TRAY"
      desc = "Paper tray options"
      choice "tumble_default" { 
         desc = "Default"
         help = "Print from the default paper tray for your printer"  
      }
      choice "tray1" { 
	 value = "force_tray1"
         desc = "Tray 1"
         help = "Print on paper from tray 1"
      }
      choice "tray2" { 
	 value = "force_tray2"
         desc = "Tray 2"
         help = "Print on paper from tray 2"
      }
      choice "tray3" { 
	 value = "force_tray3"
         desc = "Tray 3"
         help = "Print on paper from tray 3"
      }
      choice "tray4" { 
	 value = "force_tray4"
         desc = "Tray 4"
         help = "Print on paper from tray 4"
      }
   }

   option { 
      var = "PAPER_SIZE" 
      desc = "Paper size"
      choice "letter" { 
	 value = "letter"
         desc = "Letter"
      }
      choice "legal" { 
	 value = "legal"
         desc = "legal"
      }
      choice "A4" { 
	 value = "A4"
         desc = "A4"
      }
   }

   argument { 
      var = "COPIES"
      desc = "Number of Copies"
      help = "Number of copies to print"
      def_value = "1"
   }

   language_driver ps { 
      filetype_regx = "postscript"
   }

   language_driver text {
      convert_exec {#!/bin/sh

	if [ "$PAPER_SIZE" = "legal" ]; then 
		PAGE_HEIGHT="14"
		LINES_PER_PAGE="85"
	elif [ "$PAPER_SIZE" = "A4" ]; then 
		PAGE_HEIGHT="11.7"
		LINES_PER_PAGE="70"
	else  
		PAGE_HEIGHT="11"
		LINES_PER_PAGE="66"
	fi   

        cat > $OUTPUT <<EOF
		%!PS
		/page_height {$PAGE_HEIGHT} def
		/lpp {$LINES_PER_PAGE} def
		/Courier findfont 12 scalefont setfont 
		/inch {72 mul} def
		/dy  page_height .5 sub lpp .5 add div inch def 
		/l_marg .4 inch def
		/t_marg page_height .25 sub inch dy sub def 
		/newp { l_marg t_marg moveto /lc 0 def } def
		/ceop { lc 66 ge { showpage newp } if /lc lc 1 add def } def
		/crlf { currentpoint exch pop dy sub l_marg exch moveto } def
		newp 
		%%EndProlog
EOF

	expand $INPUT |
	tr -s '[\001-\011][\016-\037]' '@' |
	sed 	-e 's/\\/\\\\/g' -e 's/[()]/\\&/g' \
		-e 's/^/ceop (/' -e 's/$/) show crlf/' >> $OUTPUT 

        cat >> $OUTPUT <<EOF
		%%Trailer
		showpage
EOF
      }
   }

   filter_exec {

      echo "%!PS" > $OUTPUT;
      echo "statusdict begin" >> $OUTPUT;

      if [ "$DUPLEX" = "force_duplex" ]; then
 	 echo "   statusdict /setduplexmode known " >> $OUTPUT;
         echo "   {true setduplexmode} if" >> $OUTPUT;
      elif [ "$DUPLEX" = "force_simplex" ]; then	
 	 echo "   statusdict /setduplexmode known " >> $OUTPUT;
         echo "   {false setduplexmode} if" >> $OUTPUT;
      fi

      echo "<</NumCopies $COPIES>> setpagedevice" >> $OUTPUT

      if [ "$MANUAL" = "manual" ]; then
         echo " <</ManualFeed true>> setpagedevice" >> $OUTPUT;
      fi

      if [ "$TUMBLE" = "force_tumble" ]; then
 	 echo "   statusdict /settumble known {true settumble} if" >> $OUTPUT;
      elif [ "$TUMBLE" = "force_notumble" ]; then	
 	 echo "   statusdict /settumble known {false settumble} if" >> $OUTPUT;
      fi

      if [ "$PAPER_TRAY" = "force_tray1" ]; then
 	 echo "   statusdict /setpapertray known " >> $OUTPUT;
         echo "   {1 setpapertray} if" >> $OUTPUT;
      elif [ "$PAPER_TRAY" = "force_tray2" ]; then	
 	 echo "   statusdict /setpapertray known " >> $OUTPUT;
         echo "   {2 setpapertray} if" >> $OUTPUT;
      elif [ "$PAPER_TRAY" = "force_tray3" ]; then	
 	 echo "   statusdict /setpapertray known " >> $OUTPUT;
         echo "   {3 setpapertray} if" >> $OUTPUT;
      elif [ "$PAPER_TRAY" = "force_tray4" ]; then	
 	 echo "   statusdict /setpapertray known " >> $OUTPUT;
         echo "   {4 setpapertray} if" >> $OUTPUT;
      fi

      echo "end" >> $OUTPUT

      cat $INPUT >> $OUTPUT
   }

}

